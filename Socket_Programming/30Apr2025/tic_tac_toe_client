#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <openssl/sha.h>
#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>

#define PORT 8080
#define BUFFER_SIZE 2048

void base64_encode(const unsigned char *input, int length, char *output) {
    BIO *bmem, *b64;
    BUF_MEM *bptr;

    b64 = BIO_new(BIO_f_base64());
    bmem = BIO_new(BIO_s_mem());
    b64 = BIO_push(b64, bmem);

    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
    BIO_write(b64, input, length);
    BIO_flush(b64);
    BIO_get_mem_ptr(b64, &bptr);

    memcpy(output, bptr->data, bptr->length);
    output[bptr->length] = 0;

    BIO_free_all(b64);
}

void send_handshake(int sockfd, const char *host) {
    char buffer[1024];
    const char *key = "dGhlIHNhbXBsZSBub25jZQ==";

    snprintf(buffer, sizeof(buffer),
        "GET /chat HTTP/1.1\r\n"
        "Host: %s:%d\r\n"
        "Upgrade: websocket\r\n"
        "Connection: Upgrade\r\n"
        "Sec-WebSocket-Key: %s\r\n"
        "Sec-WebSocket-Version: 13\r\n"
        "\r\n",
        host, PORT, key);

    send(sockfd, buffer, strlen(buffer), 0);
    recv(sockfd, buffer, sizeof(buffer), 0); // read handshake response
}

void encode_ws_frame(const char *message, unsigned char *frame, int *frame_len) {
    int len = strlen(message);
    frame[0] = 0x81; // FIN + text frame
    if (len <= 125) {
        frame[1] = len;
        memcpy(&frame[2], message, len);
        *frame_len = 2 + len;
    }
    // For simplicity, larger messages aren't supported here
}

void decode_ws_frame(unsigned char *frame, int frame_len, char *decoded_msg) {
    if (frame_len < 2) return;
    int payload_len = frame[1] & 0x7F;
    if (payload_len + 2 > frame_len) return;
    memcpy(decoded_msg, &frame[2], payload_len);
    decoded_msg[payload_len] = '\0';
}

int main() {
    struct sockaddr_in server_addr;
    int sockfd;
    char buffer[BUFFER_SIZE];
    char input[256];
    fd_set read_fds;

    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        exit(EXIT_FAILURE);
    }

    send_handshake(sockfd, "127.0.0.1");

    printf("Connected to WebSocket server.\n");

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(sockfd, &read_fds);
        FD_SET(STDIN_FILENO, &read_fds);

        if (select(sockfd + 1, &read_fds, NULL, NULL, NULL) < 0) {
            perror("select");
            break;
        }

        if (FD_ISSET(STDIN_FILENO, &read_fds)) {
            if (fgets(input, sizeof(input), stdin)) {
                input[strcspn(input, "\n")] = 0;
                unsigned char frame[512];
                int frame_len;
                encode_ws_frame(input, frame, &frame_len);
                send(sockfd, frame, frame_len, 0);
            }
        }

        if (FD_ISSET(sockfd, &read_fds)) {
            int n = recv(sockfd, buffer, sizeof(buffer), 0);
            if (n <= 0) {
                printf("Connection closed by server.\n");
                break;
            }
            char decoded[512];
            decode_ws_frame((unsigned char *)buffer, n, decoded);
            printf("Received: %s\n", decoded);
        }
    }

    close(sockfd);
    return 0;
}

