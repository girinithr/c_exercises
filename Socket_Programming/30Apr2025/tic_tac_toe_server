#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <sys/epoll.h>
#include <sys/socket.h>
#include <openssl/sha.h>
#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>

#define MAX_EVENTS 100
#define MAX_CLIENTS 100
#define PORT 8080
#define BUFFER_SIZE 2048

int client_pairs[MAX_CLIENTS];
char boards[MAX_CLIENTS / 2][3][3];
int current_turn[MAX_CLIENTS / 2];

void base64_encode(const unsigned char *input, int length, char *output) {
    BIO *bmem, *b64;
    BUF_MEM *bptr;

    b64 = BIO_new(BIO_f_base64());
    bmem = BIO_new(BIO_s_mem());
    b64 = BIO_push(b64, bmem);

    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
    BIO_write(b64, input, length);
    BIO_flush(b64);
    BIO_get_mem_ptr(b64, &bptr);

    memcpy(output, bptr->data, bptr->length);
    output[bptr->length] = 0;

    BIO_free_all(b64);
}

void compute_accept_key(const char *client_key, char *accept_key) {
    const char *GUID = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    char key_concat[256];
    unsigned char sha1_result[SHA_DIGEST_LENGTH];

    snprintf(key_concat, sizeof(key_concat), "%s%s", client_key, GUID);
    SHA1((unsigned char *)key_concat, strlen(key_concat), sha1_result);

    base64_encode(sha1_result, SHA_DIGEST_LENGTH, accept_key);
}

void send_handshake_response(int client_fd, const char *accept_key) {
    char response[1024];
    snprintf(response, sizeof(response),
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n\r\n",
             accept_key);
    send(client_fd, response, strlen(response), 0);
}

void encode_ws_frame(const char *message, unsigned char *frame, int *frame_len) {
    int len = strlen(message);
    frame[0] = 0x81;
    if (len <= 125) {
        frame[1] = len;
        memcpy(&frame[2], message, len);
        *frame_len = 2 + len;
    }
}

void decode_ws_frame(unsigned char *frame, int frame_len, char *decoded_msg) {
    int payload_len = frame[1] & 0x7F;
    memcpy(decoded_msg, &frame[2], payload_len);
    decoded_msg[payload_len] = '\0';
}

void reset_board(char board[3][3]) {
    int n = 1;
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = '0' + n++;
}

void display_board(char board[3][3], char *output) {
    sprintf(output, "\n%c | %c | %c\n---------\n%c | %c | %c\n---------\n%c | %c | %c\n",
            board[0][0], board[0][1], board[0][2],
            board[1][0], board[1][1], board[1][2],
            board[2][0], board[2][1], board[2][2]);
}

int check_winner(char board[3][3]) {
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) return 1;
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) return 1;
    }
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) return 1;
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) return 1;
    return 0;
}

void relay_game_message(int player_fd, int peer_fd, int move, int pair_idx) {
    char mark = (current_turn[pair_idx] % 2 == 0) ? 'X' : 'O';
    int row = (move - 1) / 3, col = (move - 1) % 3;
    if (move < 1 || move > 9 || boards[pair_idx][row][col] == 'X' || boards[pair_idx][row][col] == 'O') return;
    boards[pair_idx][row][col] = mark;

    char message[512];
    char board_str[256];
    display_board(boards[pair_idx], board_str);

    if (check_winner(boards[pair_idx])) {
        snprintf(message, sizeof(message), "Player %c wins!\n%s", mark, board_str);
        current_turn[pair_idx] = 0;
        reset_board(boards[pair_idx]);
    } else {
        current_turn[pair_idx]++;
        snprintf(message, sizeof(message), "Next turn (%c):\n%s", (current_turn[pair_idx] % 2 == 0) ? 'X' : 'O', board_str);
    }

    unsigned char frame[512];
    int frame_len;
    encode_ws_frame(message, frame, &frame_len);
    send(player_fd, frame, frame_len, 0);
    send(peer_fd, frame, frame_len, 0);
}

int main() {
    int server_fd, epoll_fd;
    struct sockaddr_in server_addr;
    struct epoll_event ev, events[MAX_EVENTS];

    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    fcntl(server_fd, F_SETFL, O_NONBLOCK);
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr));
    listen(server_fd, 10);

    epoll_fd = epoll_create1(0);
    ev.events = EPOLLIN;
    ev.data.fd = server_fd;
    epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_fd, &ev);

    for (int i = 0; i < MAX_CLIENTS; ++i) client_pairs[i] = -1;

    printf("Server started on port %d...\n", PORT);

    while (1) {
        int nfds = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
        for (int i = 0; i < nfds; i++) {
            if (events[i].data.fd == server_fd) {
                int client_fd = accept(server_fd, NULL, NULL);
                fcntl(client_fd, F_SETFL, O_NONBLOCK);
                ev.events = EPOLLIN;
                ev.data.fd = client_fd;
                epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &ev);
            } else {
                int client_fd = events[i].data.fd;
                char buffer[BUFFER_SIZE];
                int n = recv(client_fd, buffer, sizeof(buffer), 0);
                if (n <= 0) {
                    close(client_fd);
                    continue;
                }

                if (strstr(buffer, "Sec-WebSocket-Key")) {
                    char *key_start = strstr(buffer, "Sec-WebSocket-Key: ") + 19;
                    char client_key[256], accept_key[256];
                    sscanf(key_start, "%[^\r\n]", client_key);
                    compute_accept_key(client_key, accept_key);
                    send_handshake_response(client_fd, accept_key);

                    for (int i = 0; i < MAX_CLIENTS; i += 2) {
                        if (client_pairs[i] == -1) {
                            client_pairs[i] = client_fd;
                        } else if (client_pairs[i + 1] == -1) {
                            client_pairs[i + 1] = client_fd;
                            reset_board(boards[i / 2]);
                            current_turn[i / 2] = 0;
                            char message[256];
                            sprintf(message, "Game start! Player X begins.\n");
                            unsigned char frame[512];
                            int len;
                            encode_ws_frame(message, frame, &len);
                            send(client_pairs[i], frame, len, 0);
                            send(client_pairs[i + 1], frame, len, 0);
                            break;
                        }
                    }
                } else {
                    char decoded[512];
                    decode_ws_frame((unsigned char *)buffer, n, decoded);
                    int move = atoi(decoded);

                    for (int i = 0; i < MAX_CLIENTS; i += 2) {
                        if (client_pairs[i] == client_fd || client_pairs[i + 1] == client_fd) {
                            int peer_fd = (client_pairs[i] == client_fd) ? client_pairs[i + 1] : client_pairs[i];
                            relay_game_message(client_fd, peer_fd, move, i / 2);
                            break;
                        }
                    }
                }
            }
        }
    }

    close(server_fd);
    return 0;
}

