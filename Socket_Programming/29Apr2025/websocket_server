#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <netinet/in.h>
#include <sys/epoll.h>
#include <openssl/sha.h>
#include <openssl/bio.h>
#include <openssl/buffer.h>
#include <openssl/evp.h>

#define MAX_CLIENTS 100
#define MAX_EVENTS 10
#define BUFFER_SIZE 4096
int clients[MAX_CLIENTS];
int pair[MAX_CLIENTS];

char *base64_encode(const unsigned char *input, int length) {
    BIO *bmem, *b64;
    BUF_MEM *bptr;
    b64 = BIO_new(BIO_f_base64());
    bmem = BIO_new(BIO_s_mem());
    b64 = BIO_push(b64, bmem);
    BIO_set_flags(b64, BIO_FLAGS_BASE64_NO_NL);
    BIO_write(b64, input, length);
    BIO_flush(b64);
    BIO_get_mem_ptr(b64, &bptr);
    char *buff = (char *)malloc(bptr->length + 1);
    memcpy(buff, bptr->data, bptr->length);
    buff[bptr->length] = 0;
    BIO_free_all(b64);
    return buff;
}

void perform_handshake(int client_fd) {
    char buffer[BUFFER_SIZE];
    recv(client_fd, buffer, sizeof(buffer), 0);

    char *key_header = strstr(buffer, "Sec-WebSocket-Key:");
    if (!key_header) return;
    key_header += 19;
    char client_key[128] = {0};
    sscanf(key_header, "%s", client_key);

    char combined[256];
    snprintf(combined, sizeof(combined), "%s258EAFA5-E914-47DA-95CA-C5AB0DC85B11", client_key);
    unsigned char hash[SHA_DIGEST_LENGTH];
    SHA1((unsigned char *)combined, strlen(combined), hash);
    char *encoded = base64_encode(hash, SHA_DIGEST_LENGTH);

    char response[512];
    snprintf(response, sizeof(response),
        "HTTP/1.1 101 Switching Protocols\r\n"
        "Upgrade: websocket\r\n"
        "Connection: Upgrade\r\n"
        "Sec-WebSocket-Accept: %s\r\n\r\n", encoded);
    send(client_fd, response, strlen(response), 0);
    free(encoded);
}

void send_ws_message(int client_fd, const char *msg) {
    size_t len = strlen(msg);
    unsigned char frame[10 + len];
    int idx = 0;
    frame[idx++] = 0x81;
    if (len <= 125) {
        frame[idx++] = len;
    } else if (len <= 65535) {
        frame[idx++] = 126;
        frame[idx++] = (len >> 8) & 0xFF;
        frame[idx++] = len & 0xFF;
    } else {
        frame[idx++] = 127;
        for (int i = 7; i >= 0; --i)
            frame[idx++] = (len >> (8 * i)) & 0xFF;
    }
    memcpy(frame + idx, msg, len);
    send(client_fd, frame, idx + len, 0);
}

void handle_frame(int client_fd, int pair_fd) {
    unsigned char buffer[BUFFER_SIZE];
    int len = recv(client_fd, buffer, sizeof(buffer), 0);
    if (len <= 0) return;

    int offset = 2;
    uint64_t payload_len = buffer[1] & 0x7F;

    if (payload_len == 126) {
        payload_len = (buffer[2] << 8) | buffer[3];
        offset += 2;
    } else if (payload_len == 127) {
        payload_len = 0;
        for (int i = 0; i < 8; ++i)
            payload_len = (payload_len << 8) | buffer[offset + i];
        offset += 8;
    }

    unsigned char mask[4];
    memcpy(mask, &buffer[offset], 4);
    offset += 4;

    char message[BUFFER_SIZE];
    for (uint64_t i = 0; i < payload_len; ++i)
        message[i] = buffer[offset + i] ^ mask[i % 4];
    message[payload_len] = '\0';

    if (pair_fd != -1)
        send_ws_message(pair_fd, message);
}

int main() {
    int server_fd = socket(AF_INET, SOCK_STREAM, 0);
    struct sockaddr_in addr = {.sin_family = AF_INET, .sin_port = htons(8080), .sin_addr.s_addr = INADDR_ANY};
    bind(server_fd, (struct sockaddr *)&addr, sizeof(addr));
    listen(server_fd, MAX_CLIENTS);

    int epoll_fd = epoll_create1(0);
    struct epoll_event ev = {.events = EPOLLIN, .data.fd = server_fd};
    epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_fd, &ev);

    int client_count = 0;
    struct epoll_event events[MAX_EVENTS];

    while (1) {
        int nfds = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
        for (int i = 0; i < nfds; i++) {
            int fd = events[i].data.fd;
            if (fd == server_fd) {
                int client_fd = accept(server_fd, NULL, NULL);
                fcntl(client_fd, F_SETFL, O_NONBLOCK);
                ev.events = EPOLLIN;
                ev.data.fd = client_fd;
                epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &ev);
                perform_handshake(client_fd);

                clients[client_count] = client_fd;
                pair[client_count] = (client_count % 2 == 0) ? -1 : clients[client_count - 1];
                if (client_count % 2 == 1) {
                    pair[client_count - 1] = client_fd;
                }
                client_count++;
            } else {
                int idx = -1;
                for (int j = 0; j < client_count; j++) {
                    if (clients[j] == fd) {
                        idx = j;
                        break;
                    }
                }
                if (idx != -1) {
                    handle_frame(fd, pair[idx]);
                }
            }
        }
    }
    return 0;
}

